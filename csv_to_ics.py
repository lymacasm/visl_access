import csv
from ics import Calendar, Event
from datetime import datetime
from datetime import timedelta
from calendar import WEDNESDAY
import arrow
import argparse
from io import StringIO
import visl_access as visl

def _csv_to_ics(team_name, csv_reader: csv.DictReader, ics_out_path):
    cal = Calendar()
    for row in csv_reader:
        if row["Time"][0] != " ":
            row["Time"] = " " + row["Time"]
        date = datetime.strptime(row["Date"] + row["Time"], "%Y-%m-%d %I:%M%p")
        last_wednesday = date - timedelta(days=((date.weekday() - WEDNESDAY) % 7))
        date = arrow.get(date, "US/Pacific")
        if team_name.lower() in row["home_team"].lower():
            team = row["visit_team"]
            home_status = "Home"
        else:
            team = row["home_team"]
            home_status = "Away"
        e = Event(uid=f'{row["sched_name_desc"].strip()}-{row["sched_type_desc"].strip()}-{row["division_name"].strip()}-{row["sched_agegroup"].strip()}-{row["sched_pool"]}-'
                f'{row["visit_sched_pool"].strip()}-{row["home_cup_pool"].strip()}-{row["visit_cup_pool"].strip()}-{row["sched_status_desc"].strip()}-{row["home_team"].strip()}-'
                f'{row["home_club"].strip()}-{row["visit_team"].strip()}-{row["visit_club"].strip()}-{row["game_no"].strip()}-{last_wednesday.strftime("%Y-%m-%d")}'.replace(" ", ""))
        e.name = f"{team} ({home_status})"
        e.begin = date
        e.location = row["field_name"]
        print(f"{e.name} @ {e.location} @ {e.begin}\n")

        cal.events.add(e)

    with open(ics_out_path, 'w') as ics_file:
        ics_file.writelines(cal.serialize_iter())

def csv_file_to_ics(team_name, csv_in_path, ics_out_path, division=None):
    # Get more accurate team name if division was provided
    if division is not None:
        team_name = visl.get_team(team_name, division)[0]

    with open(csv_in_path) as csv_file:
        _csv_to_ics(team_name, csv.DictReader(csv_file), ics_out_path)

def get_team_ics(team_name, division, ics_out_path):
    # Get the CSV schedule for the team
    (team_name, team_id) = visl.get_team(team_name, division)
    args = visl.ScheduleMaintArgs(cmd=visl.Commands.CSV, team_id=team_id, division=division)
    csv_str = visl.get_csv_schedule(args)

    # Conver to ICS file
    f = StringIO(csv_str)
    _csv_to_ics(team_name, csv.DictReader(f), ics_out_path)

def main():
    parser = argparse.ArgumentParser(description="Parses the csv generated by visl.org's schedule filter feature to generate an importable calendar file (ics file). "
        "CSV generated via the Excel button on the page.")
    subparsers = parser.add_subparsers(dest="cmd", required=True)

    csv_parser = subparsers.add_parser("csv", help="Convert VISL CSV schedule file to ICS format.")
    csv_parser.add_argument("-c", "--csv_in_file", required=True)
    csv_parser.add_argument("-i", "--ics_out_file", required=True)
    csv_parser.add_argument("-t", "--team_name", required=True)
    csv_parser.add_argument("-d", "--division")

    visl_team_parser = subparsers.add_parser("visl_team", help="Queries VISL REST API using provided team and division to generate an ICS of the game schedule.")
    visl_team_parser.add_argument("-t", "--team_name", required=True)
    visl_team_parser.add_argument("-d", "--division", required=True)
    visl_team_parser.add_argument("-i", "--ics_out_file", required=True)

    args = parser.parse_args()
    if args.cmd == "csv":
        csv_file_to_ics(args.team_name, args.csv_in_file, args.ics_out_file, args.division)
    elif args.cmd == "visl_team":
        get_team_ics(args.team_name, args.division, args.ics_out_file)

if __name__ == "__main__":
    main()

import argparse
import visl.access as visl
from visl.csv import VislCSV

def csv_file_to_ics(team_name, csv_in_path, ics_out_path, division=None):
    # Get more accurate team name if division was provided
    if division is not None:
        team_name = visl.get_team(team_name, division)[0]

    # Parse the CSV data into class
    with open(csv_in_path) as csv_file:
        csv_data = VislCSV(team_name, csv_file)

    # Save CSV data to ics file
    csv_data.to_ics_file(ics_out_path)

def get_team_ics(team_name, division, ics_out_path, clear_cache):
    # Get the CSV schedule for the team
    (team_name, team_id) = visl.get_team(team_name, division, clear_cache)
    args = visl.ScheduleMaintArgs(
        cmd=visl.Commands.CSV,
        team_id=team_id,
        division="div_filter_bypass",  # By using non-empty string that doesn't match division here, we can bypass the division filter, and pull both cup games and league games
        clear_cache=clear_cache
    )
    csv_data = visl.get_visl_csv(team_name, args)

    # Convert to ICS file
    csv_data.to_ics_file(ics_out_path)

def get_club_ics(club_name, ics_out_path, clear_cache):
    # Get the CSV schedule for the club
    (club_name, club_id) = visl.get_club(club_name, clear_cache)
    args = visl.ScheduleMaintArgs(cmd=visl.Commands.CSV, club=club_id, clear_cache=clear_cache)
    csv_data = visl.get_visl_csv(club_name, args)

    # Convert to ICS file
    csv_data.to_ics_file(ics_out_path)

def main():
    parser = argparse.ArgumentParser(description="Parses the csv generated by visl.org's schedule filter feature to generate an importable calendar file (ics file). "
        "CSV generated via the Excel button on the page.")
    subparsers = parser.add_subparsers(dest="cmd", required=True)

    csv_parser = subparsers.add_parser("csv", help="Convert VISL CSV schedule file to ICS format.")
    csv_parser.add_argument("-c", "--csv_in_file", required=True)
    csv_parser.add_argument("-i", "--ics_out_file", required=True)
    csv_parser.add_argument("-t", "--team_name", required=True)
    csv_parser.add_argument("-d", "--division")

    visl_team_parser = subparsers.add_parser("visl_team", help="Queries VISL REST API using provided team and division to generate an ICS of the game schedule.")
    visl_team_parser.add_argument("-t", "--team_name", required=True)
    visl_team_parser.add_argument("-d", "--division", required=True)
    visl_team_parser.add_argument("-i", "--ics_out_file", required=True)
    visl_team_parser.add_argument("-x", "--clear_cache", action="store_true")

    visl_team_parser = subparsers.add_parser("visl_club", help="Queries VISL REST API using provided club to generate an ICS of the game schedule for all teams in club.")
    visl_team_parser.add_argument("-c", "--club_name", required=True)
    visl_team_parser.add_argument("-i", "--ics_out_file", required=True)
    visl_team_parser.add_argument("-x", "--clear_cache", action="store_true")

    args = parser.parse_args()
    if args.cmd == "csv":
        csv_file_to_ics(args.team_name, args.csv_in_file, args.ics_out_file, args.division)
    elif args.cmd == "visl_team":
        get_team_ics(args.team_name, args.division, args.ics_out_file, args.clear_cache)
    elif args.cmd == "visl_club":
        get_club_ics(args.club_name, args.ics_out_file, args.clear_cache)

if __name__ == "__main__":
    main()
